<?php

/**
 * Implements hook_preprocess_html().
 */
function gd_theme_preprocess_html(&$variables) {
  //drupal_add_js(drupal_get_path('module', 'gd_theme') . '/js/ajax_command.js');
}

/**
 * Implements hook_preprocess_node().
 */
function gd_theme_preprocess_node(&$variables, $hook) {
  $include = drupal_get_path('module', 'gd_theme') .'/includes/' . $variables['node']->bundle() . '.inc';
  if (file_exists($include)) {
    require_once $include;
  }

  $function = __FUNCTION__ . '_' . $variables['node']->bundle();
  if (function_exists($function)) {
    $function($variables, $hook);
  }

  if ($variables['view_mode'] == 'full') {
  }

  $variables['attributes']['class'][] = 'view-mode-' . str_replace('_', '-', $variables['view_mode']);
  $variables['attributes']['class'][] = 'node';
  $variables['attributes']['class'][] = 'node-' . $variables['node']->bundle();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gd_theme_preprocess_entity(&$variables, $hook) {
  global $theme;
  if (isset($variables['entity_type']) && $theme == variable_get('theme_default')) {
    $include = drupal_get_path('module', 'gd_theme') .'/includes_entity/' . $variables['entity_type'] . '.inc';
    if (file_exists($include)) {
     require_once $include;
    }

    $function = __FUNCTION__ . '_' . $variables['entity_type'];
    if (function_exists($function)) {
     $function($variables, $hook);
    }
  }
  $variables['classes_array'][] = 'view-mode-' . str_replace('_', '-', $variables['view_mode']);
  array_unshift($variables['theme_hook_suggestions'], $variables['theme_hook_suggestions'][0] . '__' . $variables['view_mode']);
}

/**
 * Implements hook_theme_registry_alter().
 * /
function gd_theme_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'gd_theme');

}
*/

/**
 * Implements hook_form_FORMID_alter().
 */
function gd_theme_form_user_login_alter(&$form, &$form_state) {

  $form['name']['#attributes']['autocorrect']    = 'off';
  $form['name']['#attributes']['autocapitalize'] = 'off';
  $form['name']['#attributes']['spellcheck']     = 'false';
  $form['pass']['#attributes']['autocorrect']    = 'off';
  $form['pass']['#attributes']['autocapitalize'] = 'off';
  $form['pass']['#attributes']['spellcheck']     = 'false';

  // $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
  // $form['pass']['#attributes']['placeholder'] = $form['pass']['#title'];

}

/**
 * Renders a View for display in some other element.
 *
 * @param $view_key
 *   The ID of the View to embed.
 * @param $display_id
 *   The ID of the display of the View that will actually be rendered.
 * @param $arguments
 *   An array of arguments to pass to the View.
 * @param $override_url
 *   A url that overrides the url of the current view.
 *
 * @return
 *   The rendered output of the chosen View display.
 */
function gd_theme_embed_view($view_id, $display_id, $arguments, $override_url = '') {
  // Load the specified View.
  $view = views_get_view($view_id);
  $view->set_display($display_id);

  // Set the specific arguments passed in.
  $view->set_arguments($arguments);

  // Override the view url, if an override was provided.
  if (!empty($override_url)) {
    $view->override_url = $override_url;
  }

  // Prepare and execute the View query.
  $view->pre_execute();
  $view->execute();

  gd_theme_views_total_rows($view_id, $display_id, $view->total_rows);

  // Return the rendered View.
  return $view->render();
}

function gd_theme_views_total_rows($view_id, $display_id, $count = NULL) {
  $counts = &drupal_static(__FUNCTION__, array());
  $key = md5('view:' . $view_id . ':display_id:' . $display_id);
  if (!is_null($count)) {
    $counts[$key] = $count;
    return $count;
  }
  return isset($counts[$key]) ? $counts[$key] : 0;
}


/**
 * Import an image in the drupal filesystem.
 *
 * @param $url
 * @param $destination
 * @return array|boolean
 */
function gd_theme_import_image($url, $destination, $object = FALSE) {
  $image_path = file_build_uri($destination);
  if (file_prepare_directory($image_path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    if (file_exists($url)) {
      // Create managed File object and associate with Image field.
      $file = (object) array(
          'uid' => 1,
          'uri' => $url,
          'filemime' => file_get_mimetype($url),
          'status' => 1,
      );
      // save the file to the public files directory.
      $file = file_copy($file, $image_path);
      // Increment usage count
      file_usage_add($file, 'node', 'image', $file->fid);
      if ($object) {
        return $file;
      }
      return (array)$file;
    }
    else {
      drupal_set_message(t('File @file does not exists', array('@file' => $url)), 'error');
      return FALSE;
    }
  }
  else {
    drupal_set_message(t('Error to create the image directory'), 'error');
    return FALSE;
  }
}

/**
 * Initialize a default term object.
 *
 * @param $vocabulary.
 *   The vocabulary object.
 * @return stdClass
 *   The taxonomy term object.
 */
function gd_theme_create_term_default($vocabulary) {
  $term = new stdClass();
  $term->name = '';
  $term->description = '';
  $term->format = 'plain_text';
  $term->vid = $vocabulary->vid;
  $term->vocabulary_machine_name = $vocabulary->machine_name;
  $term->tid = NULL;
  $term->weight = 0;
  // if you use source strings, the term must be created with the language none langcode.
  $term->language = LANGUAGE_NONE;

  return $term;
}

/**
 * Create or update a translation string for a taxonomy term.
 *
 * @param $term
 *   The term object with the tid set.
 * @param $langcode
 *   The langcode for the translation.
 * @param $translation
 *   The translation string.
 */
function gd_theme_create_term_translation($term, $langcode, $translation, $property = 'name') {
  $context = array(
    'term',
    $term->tid,
    $property,
  );
  $textgroup = 'taxonomy';
  i18n_string_textgroup($textgroup)->update_translation($context, $langcode, $translation);
}

/**
 * Re-implements ajax_command_replace() with gd_insert js command.
 *
 * This command is implemented by Drupal.ajax.prototype.commands.gd_insert()
 * defined in js/ajax_command.js.
 *
 * @param $selector
 *   A jQuery selector string. If the command is a response to a request from
 *   an #ajax form element then this value can be NULL.
 * @param $html
 *   The data to use with the jQuery replaceWith() method.
 * @param $settings
 *   An optional array of settings that will be used for this command only.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_command_gd_replace($selector, $html, $settings = NULL) {
  return array(
    'command' => 'gd_insert',
    'method' => 'replaceWith',
    'selector' => $selector,
    'data' => $html,
    'settings' => $settings,
  );
}
